{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","CITY","COUNTRY","API_CALL","DATA","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PASeA,EAPA,kBACXC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,yDCKOC,EARF,SAAAC,GAAK,OACdJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,YAClBN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3CT,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9CT,EAAAC,EAAAC,cAAA,+BCUOQ,EAdC,SAAAN,GAAK,OACjBJ,EAAAC,EAAAC,cAAA,WACKE,EAAMO,MACHP,EAAMQ,SACFZ,EAAAC,EAAAC,cAAA,sBACeE,EAAMO,KADrB,KAC6BP,EAAMQ,SAG1CR,EAAMS,aAAeb,EAAAC,EAAAC,cAAA,yBAAiBE,EAAMS,aAC5CT,EAAMU,UAAYd,EAAAC,EAAAC,cAAA,sBAAcE,EAAMU,UACtCV,EAAMW,aAAef,EAAAC,EAAAC,cAAA,wBAAgBE,EAAMW,aAC3CX,EAAMY,OAAShB,EAAAC,EAAAC,cAAA,SAAIE,EAAMY,SCP5BC,EAAU,mCA6DDC,6MA1DXC,MAAQ,CACJN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,KAGXd,iDAAa,SAAAe,EAAMC,GAAN,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACTT,EAAEU,iBACIT,EAAOD,EAAEW,OAAOC,SAASvB,KAAKwB,MAC9BX,EAAUF,EAAEW,OAAOC,SAAStB,QAAQuB,OACtCZ,IAAQC,EAJH,CAAAK,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAKkBK,MAAK,qDAAAC,OAC6Bd,EAD7B,KAAAc,OACqCb,EADrC,WAAAa,OACsDpB,EADtD,kBALvB,cAKCQ,EALDI,EAAAS,KAAAT,EAAAE,KAAA,EAQcN,EAASc,OARvB,OAQCb,EARDG,EAAAS,KAULE,QAAQC,IAAIf,GACZgB,EAAKC,SAAS,CACV9B,YAAaa,EAAKkB,KAAKC,KACvBlC,KAAMe,EAAKlB,KACXI,QAASc,EAAKoB,IAAIlC,QAClBE,SAAUY,EAAKkB,KAAK9B,SACpBC,YAAaW,EAAKqB,QAAQ,GAAGhC,YAC7BC,MAAO,KAjBNa,EAAAE,KAAA,iBAoBLW,EAAKC,SAAS,CACV9B,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,kCA1BN,yBAAAa,EAAAmB,SAAA3B,EAAA4B,uIAgCT,OACIjD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,CAAM7C,WAAY2C,KAAK3C,aACvBN,EAAAC,EAAAC,cAACkD,EAAD,CACIvC,YAAaoC,KAAK9B,MAAMN,YACxBF,KAAMsC,KAAK9B,MAAMR,KACjBC,QAASqC,KAAK9B,MAAMP,QACpBE,SAAUmC,KAAK9B,MAAML,SACrBC,YAAakC,KAAK9B,MAAMJ,YACxBC,MAAOiC,KAAK9B,MAAMH,gBApDpBqC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3f976c27.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1>Weather Finder</h1>\r\n        <p>Find out teamperature, conditions and more</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n        <button>Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div>\r\n        {props.city &&\r\n            props.country && (\r\n                <p>\r\n                    Location: {props.city}, {props.country}\r\n                </p>\r\n            )}\r\n        {props.temperature && <p>Temperature: {props.temperature}</p>}\r\n        {props.humidity && <p>Humidity: {props.humidity}</p>}\r\n        {props.description && <p>Conditions: {props.description}</p>}\r\n        {props.error && <p>{props.error}</p>}\r\n    </div>\r\n);\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst API_KEY = \"fa09720a41a4f39c3a1537dacbc76fc1\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: undefined\r\n    };\r\n\r\n    getWeather = async e => {\r\n        e.preventDefault();\r\n        const CITY = e.target.elements.city.value;\r\n        const COUNTRY = e.target.elements.country.value;\r\n        if (CITY && COUNTRY) {\r\n            const API_CALL = await fetch(\r\n                `https://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY}&appid=${API_KEY}&units=metric`\r\n            );\r\n            const DATA = await API_CALL.json();\r\n\r\n            console.log(DATA);\r\n            this.setState({\r\n                temperature: DATA.main.temp,\r\n                city: DATA.name,\r\n                country: DATA.sys.country,\r\n                humidity: DATA.main.humidity,\r\n                description: DATA.weather[0].description,\r\n                error: \"\"\r\n            });\r\n        } else {\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"Please Enter City and Country\"\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Titles />\r\n                <Form getWeather={this.getWeather} />\r\n                <Weather\r\n                    temperature={this.state.temperature}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}